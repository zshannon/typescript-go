// === goToDefinition ===
// === /definitions.ts ===

// export class Base {
//     [|constructor(protected readonly cArg: string) {}|]
// }
// 
// export class Derived extends Base {
// // --- (line: 6) skipped ---


// === /main.ts ===

// import { Derived } from './definitions'
// const derived = new /*GO TO DEFINITION*/Derived(cArg)




// === goToDefinition ===
// === /definitions.ts ===

// export class Base {
//     [|constructor(protected readonly cArg: string) {}|]
// }
// 
// export class Derived extends Base {
// // --- (line: 6) skipped ---


// === /defInSameFile.ts ===

// import { Base } from './definitions'
// class SameFile extends Base {
//     readonly name: string = 'SameFile'
// }
// const SameFile = new /*GO TO DEFINITION*/SameFile(cArg)
// const wrapper = new Base(cArg)




// === goToDefinition ===
// === /hasConstructor.ts ===

// import { Base } from './definitions'
// class HasConstructor extends Base {
//     [|constructor() {}|]
//     readonly name: string = '';
// }
// const hasConstructor = new /*GO TO DEFINITION*/HasConstructor(cArg)




// === goToDefinition ===
// === /definitions.ts ===

// export class Base {
//     [|constructor(protected readonly cArg: string) {}|]
// }
// 
// export class Derived extends Base {
// // --- (line: 6) skipped ---


// === /defInSameFile.ts ===

// import { Base } from './definitions'
// class SameFile extends Base {
//     readonly name: string = 'SameFile'
// }
// const SameFile = new SameFile(cArg)
// const wrapper = new /*GO TO DEFINITION*/Base(cArg)
