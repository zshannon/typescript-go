// === findAllReferences ===
// === /referencesForTypeKeywords.ts ===

// interface I {}
// function f<T /*FIND ALL REFS*/extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];




// === findAllReferences ===
// === /referencesForTypeKeywords.ts ===

// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T /*FIND ALL REFS*/extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];




// === findAllReferences ===
// === /referencesForTypeKeywords.ts ===

// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends /*FIND ALL REFS*/[|infer|] U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];




// === findAllReferences ===
// === /referencesForTypeKeywords.ts ===

// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P /*FIND ALL REFS*/in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];




// === findAllReferences ===
// === /referencesForTypeKeywords.ts ===

// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in [|keyof|] T]: 1 };
// type A4<T> = /*FIND ALL REFS*/[|keyof|] T;
// type A5<T> = readonly T[];




// === findAllReferences ===
// === /referencesForTypeKeywords.ts ===

// --- (line: 3) skipped ---
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = /*FIND ALL REFS*/[|readonly|] T[];
