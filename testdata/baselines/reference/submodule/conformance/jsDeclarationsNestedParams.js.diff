--- old.jsDeclarationsNestedParams.js
+++ new.jsDeclarationsNestedParams.js
@@= skipped -26, +26 lines =@@


 //// [file.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 class X {
     /**
       * Cancels the request, sending a cancellation to the other party
@@= skipped -17, +8 lines =@@
       * @param {string?} error.code the error code to send the cancellation with
       * @returns {Promise.<*>} resolves when the event has been sent.
       */
-    cancel(_a) {
-        return __awaiter(this, arguments, void 0, function* ({ reason, code }) { });
-    }
+    async cancel({ reason, code }) { }
 }
 class Y {
     /**
@@= skipped -14, +12 lines =@@
       * @param {string?} error.suberr.code the error code to send the cancellation with
       * @returns {Promise.<*>} resolves when the event has been sent.
       */
-    cancel(_a) {
-        return __awaiter(this, arguments, void 0, function* ({ reason, suberr }) { });
-    }
+    async cancel({ reason, suberr }) { }
 }

