--- old.jsDeclarationsInterfaces.js
+++ new.jsDeclarationsInterfaces.js
@@= skipped -122, +122 lines =@@

 //// [index.js]
 "use strict";
-// Pretty much all of this should be an error, (since interfaces are forbidden in js),
-// but we should be able to synthesize declarations from the symbols regardless
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.JJ = exports.II = exports.H = exports.G = void 0;


 //// [index.d.ts]
+// Pretty much all of this should be an error, (since interfaces are forbidden in js),
+// but we should be able to synthesize declarations from the symbols regardless
 export interface A {
 }
 export interface B {
     cat: string;
 }
 export interface C<T, U> {
-    new (): string;
-    new (x: T): U;
-    new <Q>(x: Q): T & Q;
-    (): number;
-    (x: T): U;
-    <Q>(x: Q): T & Q;
     field: T & U;
     optionalField?: T;
     readonly readonlyField: T & U;
     readonly readonlyOptionalField?: U;
+    (): number;
+    (x: T): U;
+    <Q>(x: Q): T & Q;
+    new (): string;
+    new (x: T): U;
+    new <Q>(x: Q): T & Q;
     method<Q = number>(): number;
     method<Q>(a: T & Q): Q & number;
     method(a?: number): number;
     method(...args: any[]): number;
     optMethod?(): number;
 }
+interface G {
+}
+export { G };
+interface HH {
+}
+export { HH as H };
 export interface I {
 }
+export { I as II };
+export { J as JJ };
 export interface J {
 }
 export interface K extends I, J {
@@= skipped -107, +116 lines =@@
         y: 0;
     };
 }
-export interface G {
-}
-interface HH {
-}
-export { HH as H, I as II, J as JJ };