//// [tests/cases/conformance/salsa/typeFromParamTagForFunction.ts] ////

=== node.d.ts ===
declare function require(id: string): any;
>require : (id: string) => any
>id : string

declare var module: any, exports: any;
>module : any
>exports : any

=== a-ext.js ===
exports.A = function () {
>exports.A = function () {    this.x = 1;} : () => void
>exports.A : () => void
>exports : typeof import("./a-ext")
>A : () => void
>function () {    this.x = 1;} : () => void

    this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : any
>x : any
>1 : 1

};

=== a.js ===
const { A } = require("./a-ext");
>A : () => void
>require("./a-ext") : typeof import("./a-ext")
>require : (id: string) => any
>"./a-ext" : "./a-ext"

/** @param {A} p */
function a(p) { p.x; }
>a : (p: A) => void
>p : A
>p.x : any
>p : A
>x : any

=== b-ext.js ===
exports.B = class {
>exports.B = class {    constructor() {        this.x = 1;    }} : typeof B
>exports.B : typeof B
>exports : typeof import("./b-ext")
>B : typeof B
>class {    constructor() {        this.x = 1;    }} : typeof B

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : this
>x : any
>1 : 1
    }
};

=== b.js ===
const { B } = require("./b-ext");
>B : typeof B
>require("./b-ext") : typeof import("./b-ext")
>require : (id: string) => any
>"./b-ext" : "./b-ext"

/** @param {B} p */
function b(p) { p.x; }
>b : (p: B) => void
>p : B
>p.x : any
>p : B
>x : any

=== c-ext.js ===
export function C() {
>C : () => void

    this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : any
>x : any
>1 : 1
}

=== c.js ===
const { C } = require("./c-ext");
>C : () => void
>require("./c-ext") : typeof import("./c-ext")
>require : (id: string) => any
>"./c-ext" : "./c-ext"

/** @param {C} p */
function c(p) { p.x; }
>c : (p: C) => void
>p : C
>p.x : any
>p : C
>x : any

=== d-ext.js ===
export var D = function() {
>D : () => void
>function() {    this.x = 1;} : () => void

    this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : any
>x : any
>1 : 1

};

=== d.js ===
const { D } = require("./d-ext");
>D : () => void
>require("./d-ext") : typeof import("./d-ext")
>require : (id: string) => any
>"./d-ext" : "./d-ext"

/** @param {D} p */
function d(p) { p.x; }
>d : (p: D) => void
>p : D
>p.x : any
>p : D
>x : any

=== e-ext.js ===
export class E {
>E : E

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : this
>x : any
>1 : 1
    }
}

=== e.js ===
const { E } = require("./e-ext");
>E : typeof E
>require("./e-ext") : typeof import("./e-ext")
>require : (id: string) => any
>"./e-ext" : "./e-ext"

/** @param {E} p */
function e(p) { p.x; }
>e : (p: E) => void
>p : E
>p.x : number
>p : E
>x : number

=== f.js ===
var F = function () {
>F : () => void
>function () {    this.x = 1;} : () => void

    this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : any
>x : any
>1 : 1

};

/** @param {F} p */
function f(p) { p.x; }
>f : (p: F) => void
>p : F
>p.x : any
>p : F
>x : any

=== g.js ===
function G() {
>G : () => void

    this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : any
>x : any
>1 : 1
}

/** @param {G} p */
function g(p) { p.x; }
>g : (p: G) => void
>p : G
>p.x : any
>p : G
>x : any

=== h.js ===
class H {
>H : H

    constructor() {
        this.x = 1;
>this.x = 1 : 1
>this.x : any
>this : this
>x : any
>1 : 1
    }
}

/** @param {H} p */
function h(p) { p.x; }
>h : (p: H) => void
>p : H
>p.x : number
>p : H
>x : number

