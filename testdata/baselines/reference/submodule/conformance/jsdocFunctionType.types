//// [tests/cases/conformance/jsdoc/jsdocFunctionType.ts] ////

=== functions.js ===
/**
 * @param {function(this: string, number): number} c is just passing on through
 * @return {function(this: string, number): number}
 */
function id1(c) {
>id1 : (c: any) => function
>c : any

    return c
>c : any
}

var x = id1(function (n) { return this.length + n });
>x : function
>id1(function (n) { return this.length + n }) : function
>id1 : (c: any) => function
>function (n) { return this.length + n } : (n: any) => any
>n : any
>this.length + n : any
>this.length : any
>this : any
>length : any
>n : any

/**
 * @param {function(new: { length: number }, number): number} c is just passing on through
 * @return {function(new: { length: number }, number): number}
 */
function id2(c) {
>id2 : (c: any) => function
>c : any

    return c
>c : any
}

class C {
>C : C

    /** @param {number} n */
    constructor(n) {
>n : number

        this.length = n;
>this.length = n : number
>this.length : any
>this : this
>length : any
>n : number
    }
}

var y = id2(C);
>y : function
>id2(C) : function
>id2 : (c: any) => function
>C : typeof C

var z = new y(12);
>z : any
>new y(12) : any
>y : function
>12 : 12

z.length;
>z.length : any
>z : any
>length : any

/** @type {function ("a" | "b", 1 | 2): 3 | 4} */
var f = function (ab, onetwo) { return ab === "a" ? 3 : 4;  }
>f : function
>function (ab, onetwo) { return ab === "a" ? 3 : 4;  } : (ab: any, onetwo: any) => 3 | 4
>ab : any
>onetwo : any
>ab === "a" ? 3 : 4 : 3 | 4
>ab === "a" : boolean
>ab : any
>"a" : "a"
>3 : 3
>4 : 4


/** 
 * @constructor
 * @param {number} n
 */
function D(n) {
>D : (n: number) => void
>n : number

  this.length = n;
>this.length = n : number
>this.length : any
>this : any
>length : any
>n : number
}

var y2 = id2(D);
>y2 : function
>id2(D) : function
>id2 : (c: any) => function
>D : (n: number) => void

var z2 = new y2(33);
>z2 : any
>new y2(33) : any
>y2 : function
>33 : 33

z2.length;
>z2.length : any
>z2 : any
>length : any


/** 
 * @param {function(new: D, number)} dref
 * @return {D}
 */
var construct = function(dref) { return new dref(33); }
>construct : (dref: any) => D
>function(dref) { return new dref(33); } : (dref: any) => D
>dref : any
>new dref(33) : any
>dref : any
>33 : 33

var z3 = construct(D);
>z3 : D
>construct(D) : D
>construct : (dref: any) => D
>D : (n: number) => void

z3.length;
>z3.length : any
>z3 : D
>length : any


/** 
 * @constructor
 * @param {number} n
 */
var E = function(n) {
>E : (n: number) => void
>function(n) {  this.not_length_on_purpose = n;} : (n: number) => void
>n : number

  this.not_length_on_purpose = n;
>this.not_length_on_purpose = n : number
>this.not_length_on_purpose : any
>this : any
>not_length_on_purpose : any
>n : number

};


var y3 = id2(E);
>y3 : function
>id2(E) : function
>id2 : (c: any) => function
>E : (n: number) => void

// Repro from #39229

/**
 * @type {(...args: [string, string] | [number, string, string]) => void}
 */
function foo(...args) {
>foo : (...args: [string, string] | [number, string, string]) => void
>args : [string, string] | [number, string, string]

  args;
>args : [string, string] | [number, string, string]
}

foo('abc', 'def');
>foo('abc', 'def') : void
>foo : (...args: [string, string] | [number, string, string]) => void
>'abc' : "abc"
>'def' : "def"

foo(42, 'abc', 'def');
>foo(42, 'abc', 'def') : void
>foo : (...args: [string, string] | [number, string, string]) => void
>42 : 42
>'abc' : "abc"
>'def' : "def"

