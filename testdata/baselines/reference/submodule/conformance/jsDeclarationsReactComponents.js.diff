--- old.jsDeclarationsReactComponents.js
+++ new.jsDeclarationsReactComponents.js
@@= skipped -101, +101 lines =@@
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 /// <reference path="react16.d.ts" preserve="true" />
-var react_1 = __importDefault(require("react"));
-var prop_types_1 = __importDefault(require("prop-types"));
+const react_1 = __importDefault(require("react"));
+const prop_types_1 = __importDefault(require("prop-types"));
 const TabbedShowLayout = ({}) => {
     return (react_1.default.createElement("div", null));
 };
@@= skipped -18, +18 lines =@@
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-var react_1 = __importDefault(require("react"));
+const react_1 = __importDefault(require("react"));
 /**
  * @type {React.SFC}
  */
 const TabbedShowLayout = () => {
-    return (react_1.default.createElement("div", { className: "", key: "" }, "ok"));
+    return (react_1.default.createElement("div", { className: "", key: "" }, "o"));
 };
 TabbedShowLayout.defaultProps = {
     tabs: "default value"
@@= skipped -17, +17 lines =@@
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-var react_1 = __importDefault(require("react"));
+const react_1 = __importDefault(require("react"));
 /**
  * @type {{defaultProps: {tabs: string}} & ((props?: {elem: string}) => JSX.Element)}
  */
 const TabbedShowLayout = () => {
-    return (react_1.default.createElement("div", { className: "", key: "" }, "ok"));
+    return (react_1.default.createElement("div", { className: "", key: "" }, "o"));
 };
 TabbedShowLayout.defaultProps = {
     tabs: "default value"
@@= skipped -17, +17 lines =@@
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-var react_1 = __importDefault(require("react"));
+const react_1 = __importDefault(require("react"));
 const TabbedShowLayout = (/** @type {{className: string}}*/ prop) => {
-    return (react_1.default.createElement("div", { className: prop.className, key: "" }, "ok"));
+    return (react_1.default.createElement("div", { className: prop.className, key: "" }, "o"));
 };
 TabbedShowLayout.defaultProps = {
     tabs: "default value"
@@= skipped -14, +14 lines =@@
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-var react_1 = __importDefault(require("react"));
-var prop_types_1 = __importDefault(require("prop-types"));
+const react_1 = __importDefault(require("react"));
+const prop_types_1 = __importDefault(require("prop-types"));
 function Tree({ allowDropOnRoot }) {
     return react_1.default.createElement("div", null);
 }
@@= skipped -16, +16 lines =@@


 //// [jsDeclarationsReactComponents1.d.ts]
-/// <reference path="../..react16.d.ts" preserve="true" />
-export default TabbedShowLayout;
-declare function TabbedShowLayout({}: {}): JSX.Element;
-declare namespace TabbedShowLayout {
-    namespace propTypes {
-        let version: PropTypes.Requireable<number>;
-    }
-    namespace defaultProps {
-        let tabs: undefined;
-    }
-}
 import PropTypes from "prop-types";
+declare const TabbedShowLayout: {
+    ({}: {}): JSX.Element;
+    propTypes: {
+        version: PropTypes.Requireable<number>;
+    };
+    defaultProps: {
+        tabs: undefined;
+    };
+};
+export default TabbedShowLayout;
 //// [jsDeclarationsReactComponents2.d.ts]
-export default TabbedShowLayout;
-/**
- * @type {React.SFC}
- */
-declare const TabbedShowLayout: React.SFC;
 import React from "react";
+/**
+ * @type {React.SFC}
+ */
+declare const TabbedShowLayout: React.SFC;
+export default TabbedShowLayout;
 //// [jsDeclarationsReactComponents3.d.ts]
-export default TabbedShowLayout;
 /**
  * @type {{defaultProps: {tabs: string}} & ((props?: {elem: string}) => JSX.Element)}
  */
@@= skipped -31, +29 lines =@@
 } & ((props?: {
     elem: string;
 }) => JSX.Element);
+export default TabbedShowLayout;
 //// [jsDeclarationsReactComponents4.d.ts]
+declare const TabbedShowLayout: {
+    (prop: {
+        className: string;
+    }): JSX.Element;
+    defaultProps: {
+        tabs: string;
+    };
+};
 export default TabbedShowLayout;
-declare function TabbedShowLayout(prop: {
-    className: string;
-}): JSX.Element;
-declare namespace TabbedShowLayout {
-    namespace defaultProps {
-        let tabs: string;
-    }
-}
 //// [jsDeclarationsReactComponents5.d.ts]
-export default Tree;
 declare function Tree({ allowDropOnRoot }: {
     allowDropOnRoot: any;
 }): JSX.Element;
-declare namespace Tree {
-    namespace propTypes {
-        let classes: PropTypes.Requireable<object>;
-    }
-    namespace defaultProps {
-        let classes_1: {};
-        export { classes_1 as classes };
-        export let parentSource: string;
-    }
-}
-import PropTypes from 'prop-types';
+export default Tree;
+
+
+//// [DtsFileErrors]
+
+
+out/jsDeclarationsReactComponents1.d.ts(1,23): error TS2307: Cannot find module 'prop-types' or its corresponding type declarations.
+out/jsDeclarationsReactComponents1.d.ts(3,15): error TS2503: Cannot find namespace 'JSX'.
+out/jsDeclarationsReactComponents2.d.ts(1,19): error TS2307: Cannot find module 'react' or its corresponding type declarations.
+out/jsDeclarationsReactComponents3.d.ts(10,7): error TS2503: Cannot find namespace 'JSX'.
+out/jsDeclarationsReactComponents4.d.ts(4,9): error TS2503: Cannot find namespace 'JSX'.
+out/jsDeclarationsReactComponents5.d.ts(3,5): error TS2503: Cannot find namespace 'JSX'.
+
+
+==== out/jsDeclarationsReactComponents1.d.ts (2 errors) ====
+    import PropTypes from "prop-types";
+                          ~~~~~~~~~~~~
+!!! error TS2307: Cannot find module 'prop-types' or its corresponding type declarations.
+    declare const TabbedShowLayout: {
+        ({}: {}): JSX.Element;
+                  ~~~
+!!! error TS2503: Cannot find namespace 'JSX'.
+        propTypes: {
+            version: PropTypes.Requireable<number>;
+        };
+        defaultProps: {
+            tabs: undefined;
+        };
+    };
+    export default TabbedShowLayout;
+    
+==== out/jsDeclarationsReactComponents2.d.ts (1 errors) ====
+    import React from "react";
+                      ~~~~~~~
+!!! error TS2307: Cannot find module 'react' or its corresponding type declarations.
+    /**
+     * @type {React.SFC}
+     */
+    declare const TabbedShowLayout: React.SFC;
+    export default TabbedShowLayout;
+    
+==== out/jsDeclarationsReactComponents3.d.ts (1 errors) ====
+    /**
+     * @type {{defaultProps: {tabs: string}} & ((props?: {elem: string}) => JSX.Element)}
+     */
+    declare const TabbedShowLayout: {
+        defaultProps: {
+            tabs: string;
+        };
+    } & ((props?: {
+        elem: string;
+    }) => JSX.Element);
+          ~~~
+!!! error TS2503: Cannot find namespace 'JSX'.
+    export default TabbedShowLayout;
+    
+==== out/jsDeclarationsReactComponents4.d.ts (1 errors) ====
+    declare const TabbedShowLayout: {
+        (prop: {
+            className: string;
+        }): JSX.Element;
+            ~~~
+!!! error TS2503: Cannot find namespace 'JSX'.
+        defaultProps: {
+            tabs: string;
+        };
+    };
+    export default TabbedShowLayout;
+    
+==== out/jsDeclarationsReactComponents5.d.ts (1 errors) ====
+    declare function Tree({ allowDropOnRoot }: {
+        allowDropOnRoot: any;
+    }): JSX.Element;
+        ~~~
+!!! error TS2503: Cannot find namespace 'JSX'.
+    export default Tree;
+    