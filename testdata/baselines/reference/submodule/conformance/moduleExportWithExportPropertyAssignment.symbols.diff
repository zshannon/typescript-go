--- old.moduleExportWithExportPropertyAssignment.symbols
+++ new.moduleExportWithExportPropertyAssignment.symbols
@@= skipped -10, +10 lines =@@
 >mod1 : Symbol(mod1, Decl(a.js, 1, 3))

 mod1.f() // error, not enough arguments
->mod1.f : Symbol(mod1.f, Decl(mod1.js, 1, 32))
 >mod1 : Symbol(mod1, Decl(a.js, 1, 3))
->f : Symbol(mod1.f, Decl(mod1.js, 1, 32))

 === requires.d.ts ===
 declare var module: { exports: any };
@@= skipped -16, +14 lines =@@
 === mod1.js ===
 /// <reference path='./requires.d.ts' />
 module.exports = function () { }
->module.exports : Symbol(module.exports, Decl(mod1.js, 0, 0))
->module : Symbol(export=, Decl(mod1.js, 0, 0))
+>module.exports : Symbol(export=, Decl(mod1.js, 0, 0))
+>module : Symbol(module.exports)
 >exports : Symbol(export=, Decl(mod1.js, 0, 0))

 /** @param {number} a */
 module.exports.f = function (a) { }
->module.exports.f : Symbol(f, Decl(mod1.js, 1, 32))
->module.exports : Symbol(f, Decl(mod1.js, 1, 32))
->module : Symbol(module, Decl(mod1.js, 0, 0))
->exports : Symbol(module.exports, Decl(mod1.js, 0, 0))
->f : Symbol(f, Decl(mod1.js, 1, 32))
+>module.exports : Symbol(export=, Decl(mod1.js, 0, 0))
+>module : Symbol(module.exports)
+>exports : Symbol(export=, Decl(mod1.js, 0, 0))
 >a : Symbol(a, Decl(mod1.js, 3, 29))
