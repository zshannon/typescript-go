file.js(4,11): error TS2315: Type 'Object' is not generic.
file.js(10,51): error TS2300: Duplicate identifier 'myTypes'.
file.js(13,13): error TS2300: Duplicate identifier 'myTypes'.
file.js(14,15): error TS2702: 'myTypes' only refers to a type, but is being used as a namespace here.
file.js(18,15): error TS2702: 'myTypes' only refers to a type, but is being used as a namespace here.
file.js(18,39): error TS2300: Duplicate identifier 'myTypes'.
file2.js(6,11): error TS2315: Type 'Object' is not generic.
file2.js(12,23): error TS2702: 'myTypes' only refers to a type, but is being used as a namespace here.
file2.js(17,12): error TS2702: 'testFnTypes' only refers to a type, but is being used as a namespace here.
file2.js(28,1): error TS2309: An export assignment cannot be used in a module with other exported elements.


==== file2.js (4 errors) ====
    const {myTypes} = require('./file.js');
    
    /**
     * @namespace testFnTypes
     * @global
     * @type {Object<string,*>}
              ~~~~~~~~~~~~~~~~
!!! error TS2315: Type 'Object' is not generic.
     */
    const testFnTypes = {
        // SOME PROPS HERE
    };
    
    /** @typedef {boolean|myTypes.typeC} testFnTypes.input */
                          ~~~~~~~
!!! error TS2702: 'myTypes' only refers to a type, but is being used as a namespace here.
    
    /**
     * @function testFn
     * @description A test function.
     * @param {testFnTypes.input} input - Input.
               ~~~~~~~~~~~
!!! error TS2702: 'testFnTypes' only refers to a type, but is being used as a namespace here.
     * @returns {number|null} Result.
     */
    function testFn(input) {
        if (typeof input === 'number') {
            return 2 * input;
        } else {
            return null;
        }
    }
    
    module.exports = {testFn, testFnTypes};
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2309: An export assignment cannot be used in a module with other exported elements.
==== file.js (6 errors) ====
    /**
     * @namespace myTypes
     * @global
     * @type {Object<string,*>}
              ~~~~~~~~~~~~~~~~
!!! error TS2315: Type 'Object' is not generic.
     */
    const myTypes = {
        // SOME PROPS HERE
    };
    
    /** @typedef {string|RegExp|Array<string|RegExp>} myTypes.typeA */
                                                      ~~~~~~~
!!! error TS2300: Duplicate identifier 'myTypes'.
    
    /**
     * @typedef myTypes.typeB
                ~~~~~~~
!!! error TS2300: Duplicate identifier 'myTypes'.
     * @property {myTypes.typeA}    prop1 - Prop 1.
                  ~~~~~~~
!!! error TS2702: 'myTypes' only refers to a type, but is being used as a namespace here.
     * @property {string}           prop2 - Prop 2.
     */
    
    /** @typedef {myTypes.typeB|Function} myTypes.typeC */
                  ~~~~~~~
!!! error TS2702: 'myTypes' only refers to a type, but is being used as a namespace here.
                                          ~~~~~~~
!!! error TS2300: Duplicate identifier 'myTypes'.
    
    exports.myTypes = myTypes;