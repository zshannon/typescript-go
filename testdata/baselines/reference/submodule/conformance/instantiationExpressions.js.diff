--- old.instantiationExpressions.js
+++ new.instantiationExpressions.js
@@= skipped -175, +175 lines =@@


 //// [instantiationExpressions.js]
-"use strict";
 function f1() {
     let f0 = fx; // Error
-    let f1 = (fx); // { (x: string): string; (x: string, n: number): string; }
-    let f2 = (fx); // (t: [string, number]) => [string, number]
-    let f3 = (fx); // Error
+    let f1 = fx; // { (x: string): string; (x: string, n: number): string; }
+    let f2 = fx; // (t: [string, number]) => [string, number]
+    let f3 = fx; // Error
 }
 function f2() {
     const A0 = Array; // Error
-    const A1 = (Array); // new (...) => string[]
-    const A2 = (Array); // Error
+    const A1 = Array; // new (...) => string[]
+    const A2 = Array; // Error
 }
 function f3() {
-    let c1 = (C); // { new (x: string): C<string>; f<U>(x: U): T[]; prototype: C<any>; }
-    let f1 = (C.f); // (x: string) => string[]
+    let c1 = C; // { new (x: string): C<string>; f<U>(x: U): T[]; prototype: C<any>; }
+    let f1 = C.f; // (x: string) => string[]
 }
 function f10(f) {
-    let fs = (f); // { (a: string): string; (a: string, b: number): string[]; }
+    let fs = f; // { (a: string): string; (a: string, b: number): string[]; }
 }
 function f11(f) {
-    let fs = (f); // (a: string) => string
+    let fs = f; // (a: string) => string
 }
 function f12(f) {
-    let fs = (f); // { (a: string): string; x: string; }
+    let fs = f; // { (a: string): string; x: string; }
 }
 function f13(f) {
-    let fs = (f); // Error, no applicable signatures
+    let fs = f; // Error, no applicable signatures
 }
 function f14(f) {
-    let fs = (f); // { new (a: string): string; new (a: string, b: number): string[]; }
+    let fs = f; // { new (a: string): string; new (a: string, b: number): string[]; }
 }
 function f15(f) {
-    let fs = (f); // { new (a: string): string; (a: string, b: number): string[]; }
+    let fs = f; // { new (a: string): string; (a: string, b: number): string[]; }
 }
 function f16(f) {
-    let fs = (f); // new (a: string) => string
+    let fs = f; // new (a: string) => string
 }
 function f17(f) {
-    let fs = (f); // (a: string) => string
+    let fs = f; // (a: string) => string
 }
 function f20(f) {
-    let fs = (f); // ((a: string) => string) & ((a: string, b: number) => string[]])
+    let fs = f; // ((a: string) => string) & ((a: string, b: number) => string[]])
 }
 function f21(f) {
-    let fs = (f); // (a: string) => string
+    let fs = f; // (a: string) => string
 }
 function f22(f) {
-    let fs = (f); // ((a: string) => string) & { x: string }
+    let fs = f; // ((a: string) => string) & { x: string }
 }
 function f23(f) {
-    let fs = (f); // Error, no applicable signatures
+    let fs = f; // Error, no applicable signatures
 }
 function f24(f) {
-    let fs = (f); // (new (a: string) => string) & ((a: string, b: number) => string[]])
+    let fs = f; // (new (a: string) => string) & ((a: string, b: number) => string[]])
 }
 function f25(f) {
-    let fs = (f); // (new (a: string) => string) & ((a: string, b: number) => string[]])
+    let fs = f; // (new (a: string) => string) & ((a: string, b: number) => string[]])
 }
 function f26(f) {
-    let fs = (f); // new (a: string) => string
+    let fs = f; // new (a: string) => string
 }
 function f27(f) {
-    let fs = (f); // (a: string) => string
+    let fs = f; // (a: string) => string
 }
 function f30(f) {
-    let fs = (f); // ((a: string) => string) | ((a: string, b: number) => string[]])
+    let fs = f; // ((a: string) => string) | ((a: string, b: number) => string[]])
 }
 function f31(f) {
-    let fs = (f); // Error, '(a: string, b: number) => string[]' has no applicable signatures
+    let fs = f; // Error, '(a: string, b: number) => string[]' has no applicable signatures
 }
 function f32(f) {
-    let fs = (f); // ((a: string) => string) | { x: string }
+    let fs = f; // ((a: string) => string) | { x: string }
 }
 function f33(f) {
-    let fs = (f); // Error, no applicable signatures
+    let fs = f; // Error, no applicable signatures
 }
 function f34(f) {
-    let fs = (f); // (new (a: string) => string) | ((a: string, b: number) => string[]])
+    let fs = f; // (new (a: string) => string) | ((a: string, b: number) => string[]])
 }
 function f35(f) {
-    let fs = (f); // (new (a: string) => string) | ((a: string, b: number) => string[]])
+    let fs = f; // (new (a: string) => string) | ((a: string, b: number) => string[]])
 }
 function f36(f) {
-    let fs = (f); // Error, '(a: string, b: number) => string[]' has no applicable signatures
+    let fs = f; // Error, '(a: string, b: number) => string[]' has no applicable signatures
 }
 function f37(f) {
-    let fs = (f); // Error, 'new (a: string, b: number) => string[]' has no applicable signatures
+    let fs = f; // Error, 'new (a: string, b: number) => string[]' has no applicable signatures
 }
 function f38(f) {
-    let fs = (f); // U | ((x: string) => string) | ((x: string) => string[]) | ((x: string) => string[][])
+    let fs = f; // U | ((x: string) => string) | ((x: string) => string[]) | ((x: string) => string[][])
 }
 function makeBox(value) {
     return { value };
@@= skipped -101, +100 lines =@@
 declare function fx<T>(x: T, n: number): T;
 declare function fx<T, U>(t: [T, U]): [T, U];
 declare function f1(): void;
-type T10 = typeof fx;
-type T11 = typeof fx<string>;
-type T12 = typeof fx<string, number>;
-type T13 = typeof fx<string, number, boolean>;
+type T10 = typeof fx; // Error
+type T11 = typeof fx<string>; // { (x: string): string; (x: string, n: number): string; }
+type T12 = typeof fx<string, number>; // (t: [string, number]) => [string, number]
+type T13 = typeof fx<string, number, boolean>; // Error
 declare function f2(): void;
-type T20 = typeof Array;
-type T21 = typeof Array<string>;
-type T22 = typeof Array<string, number>;
+type T20 = typeof Array; // Error
+type T21 = typeof Array<string>; // new (...) => string[]
+type T22 = typeof Array<string, number>; // Error
 declare class C<T> {
     constructor(x: T);
     static f<U>(x: U): U[];
@@= skipped -77, +77 lines =@@
 declare function makeBox<T>(value: T): {
     value: T;
 };
-type BoxFunc<T> = typeof makeBox<T>;
-type StringBoxFunc = BoxFunc<string>;
-type Box<T> = ReturnType<typeof makeBox<T>>;
-type StringBox = Box<string>;
-type A<U> = InstanceType<typeof Array<U>>;
+type BoxFunc<T> = typeof makeBox<T>; // (value: T) => { value: T }
+type StringBoxFunc = BoxFunc<string>; // (value: string) => { value: string }
+type Box<T> = ReturnType<typeof makeBox<T>>; // { value: T }
+type StringBox = Box<string>; // { value: string }
+type A<U> = InstanceType<typeof Array<U>>; // U[]
 declare const g1: {
     <T>(a: T): {
         a: T;
@@= skipped -13, +13 lines =@@
         b: U;
     };
 };
-type T30<V> = typeof g1<V>;
-type T31<A> = ReturnType<T30<A>>;
-type T32<B> = InstanceType<T30<B>>;
+type T30<V> = typeof g1<V>; // { (a: V) => { a: V }; new (b: V) => { b: V }; }
+type T31<A> = ReturnType<T30<A>>; // { a: A }
+type T32<B> = InstanceType<T30<B>>; // { b: B }
 declare const g2: {
     <T extends string>(a: T): T;
     new <T extends number>(b: T): T;
 };
-type T40<U extends string> = typeof g2<U>;
-type T41<U extends number> = typeof g2<U>;
+type T40<U extends string> = typeof g2<U>; // Error
+type T41<U extends number> = typeof g2<U>; // Error
 declare const g3: {
     <T extends string>(a: T): T;
     new <T extends number, Q>(b: T): T;
 };
-type T50<U extends string> = typeof g3<U>;
-type T51<U extends number> = typeof g3<U, any>;
+type T50<U extends string> = typeof g3<U>; // (a: U) => U
+type T51<U extends number> = typeof g3<U, any>; // (b: U) => U