--- old.renamingDestructuredPropertyInFunctionType.js
+++ new.renamingDestructuredPropertyInFunctionType.js
@@= skipped -68, +68 lines =@@
 function f12({ a: string = "" }: O): typeof string { return "a"; }

 //// [renamingDestructuredPropertyInFunctionType.js]
-// GH#37454, GH#41044
 // Below are OK but renaming should be removed from declaration emit
 function f1({ a: string }) { }
 const f2 = function ({ a: string }) { };
@@= skipped -26, +25 lines =@@


 //// [renamingDestructuredPropertyInFunctionType.d.ts]
+// GH#37454, GH#41044
 type O = {
     a?: string;
     b: number;
     c: number;
 };
-type F1 = (arg: number) => any;
-type F2 = ({ a: string }: O) => any;
-type F3 = ({ a: string, b, c }: O) => any;
-type F4 = ({ a: string }: O) => any;
-type F5 = ({ a: string, b, c }: O) => any;
+type F1 = (arg: number) => any; // OK
+type F2 = ({ a: string }: O) => any; // Error
+type F3 = ({ a: string, b, c }: O) => any; // Error
+type F4 = ({ a: string }: O) => any; // Error
+type F5 = ({ a: string, b, c }: O) => any; // Error
 type F6 = ({ a: string }: {
     a: any;
-}) => typeof string;
+}) => typeof string; // OK
 type F7 = ({ a: string, b: number }: {
     a: any;
     b: any;
-}) => typeof number;
+}) => typeof number; // Error
 type F8 = ({ a, b: number }: {
     a: any;
     b: any;
-}) => typeof number;
-type F9 = ([a, b, c]: [any, any, any]) => void;
-type G1 = new (arg: number) => any;
-type G2 = new ({ a: string }: O) => any;
-type G3 = new ({ a: string, b, c }: O) => any;
-type G4 = new ({ a: string }: O) => any;
-type G5 = new ({ a: string, b, c }: O) => any;
+}) => typeof number; // OK
+type F9 = ([a, b, c]: [any, any, any]) => void; // OK
+type G1 = new (arg: number) => any; // OK
+type G2 = new ({ a: string }: O) => any; // Error
+type G3 = new ({ a: string, b, c }: O) => any; // Error
+type G4 = new ({ a: string }: O) => any; // Error
+type G5 = new ({ a: string, b, c }: O) => any; // Error
 type G6 = new ({ a: string }: {
     a: any;
-}) => typeof string;
+}) => typeof string; // OK
 type G7 = new ({ a: string, b: number }: {
     a: any;
     b: any;
-}) => typeof number;
+}) => typeof number; // Error
 type G8 = new ({ a, b: number }: {
     a: any;
     b: any;
-}) => typeof number;
-type G9 = new ([a, b, c]: [any, any, any]) => void;
+}) => typeof number; // OK
+type G9 = new ([a, b, c]: [any, any, any]) => void; // OK
+// Below are Error but renaming is retained in declaration emit,
+// since elinding it would leave invalid syntax.
 type F10 = ({ "a": string }: {
     a: any;
-}) => void;
+}) => void; // Error
 type F11 = ({ 2: string }: {
     2: any;
-}) => void;
-type F12 = ({ ["a"]: string }: O) => void;
+}) => void; // Error
+type F12 = ({ ["a"]: string }: O) => void; // Error
 type F13 = ({ [2]: string }: {
     2: any;
-}) => void;
+}) => void; // Error
 type G10 = new ({ "a": string }: {
     a: any;
-}) => void;
+}) => void; // Error
 type G11 = new ({ 2: string }: {
     2: any;
-}) => void;
-type G12 = new ({ ["a"]: string }: O) => void;
+}) => void; // Error
+type G12 = new ({ ["a"]: string }: O) => void; // Error
 type G13 = new ({ [2]: string }: {
     2: any;
-}) => void;
+}) => void; // Error
 interface I {
-    method1(arg: number): any;
+    method1(arg: number): any; // OK
     method2({ a: string }: {
         a: any;
-    }): any;
-    (arg: number): any;
+    }): any; // Error
+    (arg: number): any; // OK
     ({ a: string }: {
         a: any;
-    }): any;
-    new (arg: number): any;
+    }): any; // Error
+    new (arg: number): any; // OK
     new ({ a: string }: {
         a: any;
-    }): any;
+    }): any; // Error
 }
+// Below are OK but renaming should be removed from declaration emit
 declare function f1({ a: string }: O): void;
 declare const f2: ({ a: string }: O) => void;
 declare const f3: ({ a: string, b, c }: O) => void;
-declare const f4: ({ a: string }: O) => typeof string;
-declare const f5: ({ a: string, b, c }: O) => typeof string;
+declare const f4: ({ a: string }: O) => string;
+declare const f5: ({ a: string, b, c }: O) => string;
 declare const obj1: {
     method({ a: string }: O): void;
 };
 declare const obj2: {
-    method({ a: string }: O): typeof string;
+    method({ a: string }: O): string;
 };
 declare function f6({ a: string }: O): void;
 declare const f7: ({ a: string, b, c }: O) => void;
@@= skipped -94, +98 lines =@@
 declare const f11: ({ [2]: string }: {
     2: any;
 }) => void;
+// In below case `string` should be kept because it is used
 declare function f12({ a: string }: O): typeof string;