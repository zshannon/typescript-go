--- old.narrowingUnionToUnion.types
+++ new.narrowingUnionToUnion.types
@@= skipped -244, +244 lines =@@
         }
     },
     (value?: string) => {
->(value?: string) => {        if (isMaybeEmptyString(value)) {            value;  // "" | undefined        }        else {            value;  // string        }    } : (value?: string) => void
+>(value?: string) => {        if (isMaybeEmptyString(value)) {            value;  // "" | undefined        }        else {            value;  // string        }    } : (value?: string | undefined) => void
 >value : string | undefined

         if (isMaybeEmptyString(value)) {
@@= skipped -46, +46 lines =@@
         }
     },
     (value?: number) => {
->(value?: number) => {        if (isMaybeZero(value)) {            value;  // 0 | undefined        }        else {            value;  // number        }    } : (value?: number) => void
+>(value?: number) => {        if (isMaybeZero(value)) {            value;  // 0 | undefined        }        else {            value;  // number        }    } : (value?: number | undefined) => void
 >value : number | undefined

         if (isMaybeZero(value)) {
@@= skipped -46, +46 lines =@@
         }
     },
     (value?: string[]) => {
->(value?: string[]) => {        if (isMaybeEmptyArray(value)) {            value;  // [] | undefined        }        else {            value;  // string[]        }    } : (value?: string[]) => void
+>(value?: string[]) => {        if (isMaybeEmptyArray(value)) {            value;  // [] | undefined        }        else {            value;  // string[]        }    } : (value?: string[] | undefined) => void
 >value : string[] | undefined

         if (isMaybeEmptyArray(value)) {
@@= skipped -24, +24 lines =@@
 >EmptyString : EmptyString

 function isEmpty(value: string | EmptyString): value is EmptyString {
->isEmpty : (value: string | EmptyString) => value is EmptyString
+>isEmpty : (value: string | null | undefined) => value is EmptyString
 >value : string | null | undefined

     return value === '' || value === null || value === undefined;
@@= skipped -21, +21 lines =@@

 if (isEmpty(test)) {
 >isEmpty(test) : boolean
->isEmpty : (value: string | EmptyString) => value is EmptyString
+>isEmpty : (value: string | null | undefined) => value is EmptyString
 >test : string | null | undefined

     test;  // EmptyString
@@= skipped -14, +14 lines =@@
 >value : any

 function test1(foo: number | string | boolean) {
->test1 : (foo: number | string | boolean) => void
+>test1 : (foo: string | number | boolean) => void
 >foo : string | number | boolean

     assert<1 | string>(foo);
@@= skipped -15, +15 lines =@@
 // Repro from #46909

 function check1(x: unknown): x is (string | 0) {
->check1 : (x: unknown) => x is (string | 0)
+>check1 : (x: unknown) => x is string | 0
 >x : unknown

 	return typeof x === "string" || x === 0;
@@= skipped -15, +15 lines =@@
 }

 function check2(x: unknown): x is ("hello" | 0) {
->check2 : (x: unknown) => x is ("hello" | 0)
+>check2 : (x: unknown) => x is "hello" | 0
 >x : unknown

 	return x === "hello" || x === 0;
@@= skipped -45, +45 lines =@@
 	}
 	if (check1(x)) {
 >check1(x) : boolean
->check1 : (x: unknown) => x is (string | 0)
+>check1 : (x: unknown) => x is string | 0
 >x : unknown

 		x;  // string | 0
@@= skipped -8, +8 lines =@@

 		if (check2(x)) {
 >check2(x) : boolean
->check2 : (x: unknown) => x is ("hello" | 0)
+>check2 : (x: unknown) => x is "hello" | 0
 >x : string | 0

 			x;  // 0 | "hello"