//// [tests/cases/conformance/jsdoc/jsdocVariadicInOverload.ts] ////

=== typeTagForMultipleVariableDeclarations.js ===
// based on code from unifiedjs/unified
class Node {}
>Node : Node

/**
 * @template {Node | undefined} [ParseTree=undefined]
 *   Output of `parse` (optional).
 * @template {Node | undefined} [HeadTree=undefined]
 *   Input for `run` (optional).
 * @template {Node | undefined} [TailTree=undefined]
 *   Output for `run` (optional).
 * @template {Node | undefined} [CompileTree=undefined]
 *   Input of `stringify` (optional).
 * @template {string | undefined} [CompileResult=undefined]
 *   Output of `stringify` (optional).
 */
export class Processor {
>Processor : Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>

  /**
   * @overload
   * @param {string | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   * @overload
   * @param {number} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {Processor}
   *
   * @param {string | number | boolean | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(value, ...parameters) {
>use : { (preset?: string): Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>; <Parameters extends unknown[] = [], Input extends string | Node = undefined, Output = Input>(plugin: number, ...parameters: Parameters | [boolean]): Processor<undefined, undefined, undefined, undefined, undefined>; }
>value : string | number | boolean
>parameters : unknown[]

    return this;
>this : this
  }
}
var p = new Processor();
>p : Processor<undefined, undefined, undefined, undefined, undefined>
>new Processor() : Processor<undefined, undefined, undefined, undefined, undefined>
>Processor : typeof Processor

var x = 1, y = 2, z = 3;
>x : number
>1 : 1
>y : number
>2 : 2
>z : number
>3 : 3

p.use(x, y, z);
>p.use(x, y, z) : Processor<undefined, undefined, undefined, undefined, undefined>
>p.use : { (preset?: string): Processor<undefined, undefined, undefined, undefined, undefined>; <Parameters extends unknown[] = [], Input extends string | Node = undefined, Output = Input>(plugin: number, ...parameters: Parameters | [boolean]): Processor<undefined, undefined, undefined, undefined, undefined>; }
>p : Processor<undefined, undefined, undefined, undefined, undefined>
>use : { (preset?: string): Processor<undefined, undefined, undefined, undefined, undefined>; <Parameters extends unknown[] = [], Input extends string | Node = undefined, Output = Input>(plugin: number, ...parameters: Parameters | [boolean]): Processor<undefined, undefined, undefined, undefined, undefined>; }
>x : number
>y : number
>z : number

