--- old.moduleExportsTypeNoExcessPropertyCheckFromContainedLiteral.types
+++ new.moduleExportsTypeNoExcessPropertyCheckFromContainedLiteral.types
@@= skipped -1, +1 lines =@@

 === eslint.config.js ===
 const eslintReact = require('./eslint-plugin-react.js');
->eslintReact : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
->require('./eslint-plugin-react.js') : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
+>eslintReact : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }
+>require('./eslint-plugin-react.js') : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }
 >require : any
 >'./eslint-plugin-react.js' : "./eslint-plugin-react.js"

 const tseslint = require('./typescript-eslint.js');
->tseslint : typeof tseslint
->require('./typescript-eslint.js') : typeof tseslint
+>tseslint : { config: (...configs: import("./typescript-eslint.js").Config[]) => void; }
+>require('./typescript-eslint.js') : { config: (...configs: import("./typescript-eslint.js").Config[]) => void; }
 >require : any
 >'./typescript-eslint.js' : "./typescript-eslint.js"

 tseslint.config(eslintReact)
 >tseslint.config(eslintReact) : void
->tseslint.config : (...configs: Config[]) => void
->tseslint : typeof tseslint
->config : (...configs: Config[]) => void
->eslintReact : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
+>tseslint.config : (...configs: import("./typescript-eslint.js").Config[]) => void
+>tseslint : { config: (...configs: import("./typescript-eslint.js").Config[]) => void; }
+>config : (...configs: import("./typescript-eslint.js").Config[]) => void
+>eslintReact : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }

 === eslint-plugin-react.js ===
 const deprecatedRules = {
@@= skipped -29, +29 lines =@@
 }

 const allRules = {
->allRules : { 'no-unsafe': boolean; }
->{  'no-unsafe': true} : { 'no-unsafe': boolean; }
+>allRules : { "no-unsafe": boolean; }
+>{  'no-unsafe': true} : { "no-unsafe": boolean; }

   'no-unsafe': true
 >'no-unsafe' : boolean
@@= skipped -9, +9 lines =@@
 }

 module.exports = {
->module.exports = {  plugins: {    react: {      deprecatedRules,      rules: allRules,    },  },} : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
->module.exports : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
->module : { exports: { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }; }
->exports : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
->{  plugins: {    react: {      deprecatedRules,      rules: allRules,    },  },} : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }; }
+>module.exports = {  plugins: {    react: {      deprecatedRules,      rules: allRules,    },  },} : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }
+>module.exports : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }
+>module : { "export=": { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }; }
+>exports : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }
+>{  plugins: {    react: {      deprecatedRules,      rules: allRules,    },  },} : { plugins: { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }; }

   plugins: {
->plugins : { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }
->{    react: {      deprecatedRules,      rules: allRules,    },  } : { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }; }
+>plugins : { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }
+>{    react: {      deprecatedRules,      rules: allRules,    },  } : { react: { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }; }

     react: {
->react : { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }
->{      deprecatedRules,      rules: allRules,    } : { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { 'no-unsafe': boolean; }; }
+>react : { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }
+>{      deprecatedRules,      rules: allRules,    } : { deprecatedRules: { "jsx-sort-default-props": boolean; }; rules: { "no-unsafe": boolean; }; }

       deprecatedRules,
 >deprecatedRules : { "jsx-sort-default-props": boolean; }

       rules: allRules,
->rules : { 'no-unsafe': boolean; }
->allRules : { 'no-unsafe': boolean; }
+>rules : { "no-unsafe": boolean; }
+>allRules : { "no-unsafe": boolean; }

     },
   },
@@= skipped -42, +42 lines =@@
 >configs : Config[]

 module.exports = { config };
->module.exports = { config } : typeof module.exports
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports = { config } : { config: (...configs: Config[]) => void; }
+>module.exports : { config: (...configs: Config[]) => void; }
+>module : { "export=": { config: (...configs: Config[]) => void; }; }
+>exports : { config: (...configs: Config[]) => void; }
 >{ config } : { config: (...configs: Config[]) => void; }
 >config : (...configs: Config[]) => void
