--- old.jsdocFunctionType.types
+++ new.jsdocFunctionType.types
@@= skipped -5, +5 lines =@@
  * @return {function(this: string, number): number}
  */
 function id1(c) {
->id1 : (c: (this: string, arg1: number) => number) => (this: string, arg1: number) => number
->c : (this: string, arg1: number) => number
+>id1 : (c: any) => function
+>c : any

     return c
->c : (this: string, arg1: number) => number
+>c : any
 }

 var x = id1(function (n) { return this.length + n });
->x : (this: string, arg1: number) => number
->id1(function (n) { return this.length + n }) : (this: string, arg1: number) => number
->id1 : (c: (this: string, arg1: number) => number) => (this: string, arg1: number) => number
->function (n) { return this.length + n } : (this: string, n: number) => number
->n : number
->this.length + n : number
->this.length : number
->this : string
->length : number
->n : number
+>x : function
+>id1(function (n) { return this.length + n }) : function
+>id1 : (c: any) => function
+>function (n) { return this.length + n } : (n: any) => any
+>n : any
+>this.length + n : any
+>this.length : any
+>this : any
+>length : any
+>n : any

 /**
  * @param {function(new: { length: number }, number): number} c is just passing on through
  * @return {function(new: { length: number }, number): number}
  */
 function id2(c) {
->id2 : (c: new (arg1: number) => { length: number; }) => new (arg1: number) => { length: number; }
->c : new (arg1: number) => { length: number; }
+>id2 : (c: any) => function
+>c : any

     return c
->c : new (arg1: number) => { length: number; }
+>c : any
 }

 class C {
@@= skipped -48, +48 lines =@@
 }

 var y = id2(C);
->y : new (arg1: number) => { length: number; }
->id2(C) : new (arg1: number) => { length: number; }
->id2 : (c: new (arg1: number) => { length: number; }) => new (arg1: number) => { length: number; }
+>y : function
+>id2(C) : function
+>id2 : (c: any) => function
 >C : typeof C

 var z = new y(12);
->z : { length: number; }
->new y(12) : { length: number; }
->y : new (arg1: number) => { length: number; }
+>z : any
+>new y(12) : any
+>y : function
 >12 : 12

 z.length;
->z.length : number
->z : { length: number; }
->length : number
+>z.length : any
+>z : any
+>length : any

 /** @type {function ("a" | "b", 1 | 2): 3 | 4} */
 var f = function (ab, onetwo) { return ab === "a" ? 3 : 4;  }
->f : (arg0: "a" | "b", arg1: 1 | 2) => 3 | 4
->function (ab, onetwo) { return ab === "a" ? 3 : 4;  } : (ab: "a" | "b", onetwo: 1 | 2) => 3 | 4
->ab : "a" | "b"
->onetwo : 1 | 2
+>f : function
+>function (ab, onetwo) { return ab === "a" ? 3 : 4;  } : (ab: any, onetwo: any) => 3 | 4
+>ab : any
+>onetwo : any
 >ab === "a" ? 3 : 4 : 3 | 4
 >ab === "a" : boolean
->ab : "a" | "b"
+>ab : any
 >"a" : "a"
 >3 : 3
 >4 : 4
@@= skipped -35, +35 lines =@@
  * @param {number} n
  */
 function D(n) {
->D : typeof D
+>D : (n: number) => void
 >n : number

   this.length = n;
 >this.length = n : number
 >this.length : any
->this : this
+>this : any
 >length : any
 >n : number
 }

 var y2 = id2(D);
->y2 : new (arg1: number) => { length: number; }
->id2(D) : new (arg1: number) => { length: number; }
->id2 : (c: new (arg1: number) => { length: number; }) => new (arg1: number) => { length: number; }
->D : typeof D
+>y2 : function
+>id2(D) : function
+>id2 : (c: any) => function
+>D : (n: number) => void

 var z2 = new y2(33);
->z2 : { length: number; }
->new y2(33) : { length: number; }
->y2 : new (arg1: number) => { length: number; }
+>z2 : any
+>new y2(33) : any
+>y2 : function
 >33 : 33

 z2.length;
->z2.length : number
->z2 : { length: number; }
->length : number
+>z2.length : any
+>z2 : any
+>length : any


 /** 
@@= skipped -34, +34 lines =@@
  * @return {D}
  */
 var construct = function(dref) { return new dref(33); }
->construct : (dref: new (arg1: number) => D) => D
->function(dref) { return new dref(33); } : (dref: new (arg1: number) => D) => D
->dref : new (arg1: number) => D
->new dref(33) : D
->dref : new (arg1: number) => D
+>construct : (dref: any) => D
+>function(dref) { return new dref(33); } : (dref: any) => D
+>dref : any
+>new dref(33) : any
+>dref : any
 >33 : 33

 var z3 = construct(D);
 >z3 : D
 >construct(D) : D
->construct : (dref: new (arg1: number) => D) => D
->D : typeof D
+>construct : (dref: any) => D
+>D : (n: number) => void

 z3.length;
->z3.length : number
+>z3.length : any
 >z3 : D
->length : number
+>length : any


 /** 
@@= skipped -24, +24 lines =@@
  * @param {number} n
  */
 var E = function(n) {
->E : typeof E
->function(n) {  this.not_length_on_purpose = n;} : typeof E
+>E : (n: number) => void
+>function(n) {  this.not_length_on_purpose = n;} : (n: number) => void
 >n : number

   this.not_length_on_purpose = n;
 >this.not_length_on_purpose = n : number
 >this.not_length_on_purpose : any
->this : this
+>this : any
 >not_length_on_purpose : any
 >n : number

@@= skipped -15, +15 lines =@@


 var y3 = id2(E);
->y3 : new (arg1: number) => { length: number; }
->id2(E) : new (arg1: number) => { length: number; }
->id2 : (c: new (arg1: number) => { length: number; }) => new (arg1: number) => { length: number; }
->E : typeof E
+>y3 : function
+>id2(E) : function
+>id2 : (c: any) => function
+>E : (n: number) => void

 // Repro from #39229
