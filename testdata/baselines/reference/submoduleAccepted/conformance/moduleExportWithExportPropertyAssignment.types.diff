--- old.moduleExportWithExportPropertyAssignment.types
+++ new.moduleExportWithExportPropertyAssignment.types
@@= skipped -2, +2 lines =@@
 === a.js ===
 /// <reference path='./requires.d.ts' />
 var mod1 = require('./mod1')
->mod1 : { (): void; f: (a: number) => void; }
->require('./mod1') : { (): void; f: (a: number) => void; }
+>mod1 : () => void
+>require('./mod1') : () => void
 >require : (name: string) => any
 >'./mod1' : "./mod1"

 mod1()
 >mod1() : void
->mod1 : { (): void; f: (a: number) => void; }
+>mod1 : () => void

 mod1.f() // error, not enough arguments
->mod1.f() : void
->mod1.f : (a: number) => void
->mod1 : { (): void; f: (a: number) => void; }
->f : (a: number) => void
+>mod1.f() : any
+>mod1.f : any
+>mod1 : () => void
+>f : any

 === requires.d.ts ===
 declare var module: { exports: any };
@@= skipped -27, +27 lines =@@
 === mod1.js ===
 /// <reference path='./requires.d.ts' />
 module.exports = function () { }
->module.exports = function () { } : { (): void; f: (a: number) => void; }
->module.exports : { (): void; f: (a: number) => void; }
->module : { exports: { (): void; f: (a: number) => void; }; }
->exports : { (): void; f: (a: number) => void; }
+>module.exports = function () { } : () => void
+>module.exports : () => void
+>module : { "export=": () => void; }
+>exports : () => void
 >function () { } : () => void

 /** @param {number} a */
 module.exports.f = function (a) { }
->module.exports.f = function (a) { } : (a: number) => void
->module.exports.f : (a: number) => void
->module.exports : { (): void; f: (a: number) => void; }
->module : { exports: { (): void; f: (a: number) => void; }; }
->exports : { (): void; f: (a: number) => void; }
->f : (a: number) => void
->function (a) { } : (a: number) => void
->a : number
+>module.exports.f = function (a) { } : (a: any) => void
+>module.exports.f : any
+>module.exports : () => void
+>module : { "export=": () => void; }
+>exports : () => void
+>f : any
+>function (a) { } : (a: any) => void
+>a : any
