--- old.nodeAllowJsPackageSelfName(module=node18).errors.txt
+++ new.nodeAllowJsPackageSelfName(module=node18).errors.txt
@@= skipped -0, +0 lines =@@
 error TS2209: The project root is ambiguous, but is required to resolve export map entry '.' in file 'package.json'. Supply the `rootDir` compiler option to disambiguate.
-index.cjs(2,23): error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("package")' call instead.
+index.cjs(2,23): error TS2307: Cannot find module 'package' or its corresponding type declarations.
+index.js(2,23): error TS2307: Cannot find module 'package' or its corresponding type declarations.
+index.mjs(2,23): error TS2307: Cannot find module 'package' or its corresponding type declarations.


 !!! error TS2209: The project root is ambiguous, but is required to resolve export map entry '.' in file 'package.json'. Supply the `rootDir` compiler option to disambiguate.
-==== index.js (0 errors) ====
+==== index.js (1 errors) ====
     // esm format file
     import * as self from "package";
+                          ~~~~~~~~~
+!!! error TS2307: Cannot find module 'package' or its corresponding type declarations.
     self;
-==== index.mjs (0 errors) ====
+==== index.mjs (1 errors) ====
     // esm format file
     import * as self from "package";
+                          ~~~~~~~~~
+!!! error TS2307: Cannot find module 'package' or its corresponding type declarations.
     self;
 ==== index.cjs (1 errors) ====
     // esm format file
     import * as self from "package";
                           ~~~~~~~~~
-!!! error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("package")' call instead.
+!!! error TS2307: Cannot find module 'package' or its corresponding type declarations.
     self;
 ==== package.json (0 errors) ====
     {