--- old.jsdocParamTagTypeLiteral.types
+++ new.jsdocParamTagTypeLiteral.types
@@= skipped -24, +24 lines =@@
  * @param {string} [opts1.w="hi"] doc5
  */
 function foo1(opts1) {
->foo1 : (opts1: {    x: string;    y?: string | undefined;    z?: string | undefined;    w?: string | undefined;}) => void
+>foo1 : (opts1: { x: string; y?: string | undefined; z?: string | undefined; w?: string | undefined; }) => void
 >opts1 : { x: string; y?: string | undefined; z?: string | undefined; w?: string | undefined; }

     opts1.x;
@@= skipped -11, +11 lines =@@

 foo1({x: 'abc'});
 >foo1({x: 'abc'}) : void
->foo1 : (opts1: {    x: string;    y?: string | undefined;    z?: string | undefined;    w?: string | undefined;}) => void
+>foo1 : (opts1: { x: string; y?: string | undefined; z?: string | undefined; w?: string | undefined; }) => void
 >{x: 'abc'} : { x: string; }
 >x : string
 >'abc' : "abc"
@@= skipped -11, +11 lines =@@
  * @param {string=} opts2[].anotherY
  */
 function foo2(/** @param opts2 bad idea theatre! */opts2) {
->foo2 : (opts2: {    anotherX: string;    anotherY?: string | undefined;}) => void
+>foo2 : (opts2: { anotherX: string; anotherY?: string | undefined; }[]) => void
 >opts2 : { anotherX: string; anotherY?: string | undefined; }[]

     opts2[0].anotherX;
@@= skipped -13, +13 lines =@@

 foo2([{anotherX: "world"}]);
 >foo2([{anotherX: "world"}]) : void
->foo2 : (opts2: {    anotherX: string;    anotherY?: string | undefined;}) => void
+>foo2 : (opts2: { anotherX: string; anotherY?: string | undefined; }[]) => void
 >[{anotherX: "world"}] : { anotherX: string; }[]
 >{anotherX: "world"} : { anotherX: string; }
 >anotherX : string
@@= skipped -11, +11 lines =@@
  * @param {string} opts3.x
  */
 function foo3(opts3) {
->foo3 : (opts3: {    x: string;}) => void
+>foo3 : (opts3: { x: string; }) => void
 >opts3 : { x: string; }

     opts3.x;
@@= skipped -10, +10 lines =@@
 }
 foo3({x: 'abc'});
 >foo3({x: 'abc'}) : void
->foo3 : (opts3: {    x: string;}) => void
+>foo3 : (opts3: { x: string; }) => void
 >{x: 'abc'} : { x: string; }
 >x : string
 >'abc' : "abc"
@@= skipped -13, +13 lines =@@
  * @param {string} [opts4[].w="hi"]
  */
 function foo4(opts4) {
->foo4 : (opts4: {    x: string;    y?: string | undefined;    z?: string;    w?: string;}) => void
+>foo4 : (opts4: { x: string; y?: string | undefined; z?: string | undefined; w?: string | undefined; }[]) => void
 >opts4 : { x: string; y?: string | undefined; z?: string | undefined; w?: string | undefined; }[]

     opts4[0].x;
@@= skipped -13, +13 lines =@@

 foo4([{ x: 'hi' }]);
 >foo4([{ x: 'hi' }]) : void
->foo4 : (opts4: {    x: string;    y?: string | undefined;    z?: string;    w?: string;}) => void
+>foo4 : (opts4: { x: string; y?: string | undefined; z?: string | undefined; w?: string | undefined; }[]) => void
 >[{ x: 'hi' }] : { x: string; }[]
 >{ x: 'hi' } : { x: string; }
 >x : string
@@= skipped -17, +17 lines =@@
  * @param {number} opts5[].unnest - Here we are almost all the way back at the beginning.
  */
 function foo5(opts5) {
->foo5 : (opts5: {    help: string;    what: {        a: string;        bad: {            idea: string;            oh: boolean;        };    };    unnest: number;}) => void
->opts5 : { help: string; what: {    a: string;    bad: {        idea: string;        oh: boolean;    };}; unnest: number; }[]
+>foo5 : (opts5: { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]) => void
+>opts5 : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]

     opts5[0].what.bad[0].idea;
 >opts5[0].what.bad[0].idea : string
 >opts5[0].what.bad[0] : { idea: string; oh: boolean; }
 >opts5[0].what.bad : { idea: string; oh: boolean; }[]
->opts5[0].what : { a: string; bad: {    idea: string;    oh: boolean;}; }
->opts5[0] : { help: string; what: {    a: string;    bad: {        idea: string;        oh: boolean;    };}; unnest: number; }
->opts5 : { help: string; what: {    a: string;    bad: {        idea: string;        oh: boolean;    };}; unnest: number; }[]
+>opts5[0].what : { a: string; bad: { idea: string; oh: boolean; }[]; }
+>opts5[0] : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }
+>opts5 : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]
 >0 : 0
->what : { a: string; bad: {    idea: string;    oh: boolean;}; }
+>what : { a: string; bad: { idea: string; oh: boolean; }[]; }
 >bad : { idea: string; oh: boolean; }[]
 >0 : 0
 >idea : string

     opts5[0].unnest;
 >opts5[0].unnest : number
->opts5[0] : { help: string; what: {    a: string;    bad: {        idea: string;        oh: boolean;    };}; unnest: number; }
->opts5 : { help: string; what: {    a: string;    bad: {        idea: string;        oh: boolean;    };}; unnest: number; }[]
+>opts5[0] : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }
+>opts5 : { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]
 >0 : 0
 >unnest : number
 }

 foo5([{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }]);
 >foo5([{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }]) : void
->foo5 : (opts5: {    help: string;    what: {        a: string;        bad: {            idea: string;            oh: boolean;        };    };    unnest: number;}) => void
+>foo5 : (opts5: { help: string; what: { a: string; bad: { idea: string; oh: boolean; }[]; }; unnest: number; }[]) => void
 >[{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }] : { help: string; what: { a: string; bad: { idea: string; oh: false; }[]; }; unnest: number; }[]
 >{ help: "help", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 } : { help: string; what: { a: string; bad: { idea: string; oh: false; }[]; }; unnest: number; }
 >help : string