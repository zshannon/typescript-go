--- old.typeFromPropertyAssignment26.types
+++ new.typeFromPropertyAssignment26.types
@@= skipped -1, +1 lines =@@

 === bug24730.js ===
 var UI = {}
->UI : typeof UI
->{} : {}
+>UI : any
+>{} : { TreeElement: typeof TreeElement; context: any; }

 UI.TreeElement = class {
 >UI.TreeElement = class {    constructor() {        this.treeOutline = 12    }} : typeof TreeElement
->UI.TreeElement : typeof TreeElement
->UI : typeof UI
->TreeElement : typeof TreeElement
+>UI.TreeElement : any
+>UI : any
+>TreeElement : any
 >class {    constructor() {        this.treeOutline = 12    }} : typeof TreeElement

     constructor() {
@@= skipped -20, +20 lines =@@
     }
 };
 UI.context = new UI.TreeElement()
->UI.context = new UI.TreeElement() : TreeElement
->UI.context : TreeElement
->UI : typeof UI
->context : TreeElement
->new UI.TreeElement() : TreeElement
->UI.TreeElement : typeof TreeElement
->UI : typeof UI
->TreeElement : typeof TreeElement
+>UI.context = new UI.TreeElement() : any
+>UI.context : any
+>UI : any
+>context : any
+>new UI.TreeElement() : any
+>UI.TreeElement : any
+>UI : any
+>TreeElement : any

 class C extends UI.TreeElement {
 >C : C
->UI.TreeElement : TreeElement
->UI : typeof UI
->TreeElement : typeof TreeElement
+>UI.TreeElement : any
+>UI : any
+>TreeElement : any

     onpopulate() {
 >onpopulate : () => void
@@= skipped -26, +26 lines =@@
         this.treeOutline.doesntExistEither()
 >this.treeOutline.doesntExistEither() : any
 >this.treeOutline.doesntExistEither : any
->this.treeOutline : number
+>this.treeOutline : any
 >this : this
->treeOutline : number
+>treeOutline : any
 >doesntExistEither : any
     }
 };