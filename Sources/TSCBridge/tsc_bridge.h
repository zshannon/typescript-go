/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/microsoft/typescript-go/cbridge */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "c_bridge.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    int code;
    char* category;
    char* message;
    char* file;
    int line;
    int column;
    int length;
} c_diagnostic;

typedef struct {
    int success;
    char* config_file;
    c_diagnostic* diagnostics;
    int diagnostic_count;
    char** emitted_files;
    int emitted_file_count;
    char** written_file_paths;
    char** written_file_contents;
    int written_file_count;
} c_build_result;

typedef struct {
    char* path;
    char* content;
} c_file_entry;

typedef struct {
    c_file_entry* files;
    int file_count;
    char** directories;
    int directory_count;
} c_file_resolver_data;

#line 1 "cgo-generated-wrapper"

#line 3 "esbuild_c_bridge.go"

#include <stdlib.h>

typedef struct {
    int* values;
    int count;
} c_int_array;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern c_build_result* tsc_build_filesystem(char* projectPath, int printErrors, char* configFile);
extern c_build_result* tsc_build_with_resolver(char* projectPath, int printErrors, char* configFile, c_file_resolver_data* resolverData);
extern char* tsc_validate_simple(char* code);
extern void tsc_free_string(char* str);
extern void tsc_free_result(c_build_result* result);
extern c_file_resolver_data* tsc_create_resolver_data();
extern void tsc_add_file_to_resolver(c_file_resolver_data* data, char* path, char* content);
extern void tsc_add_directory_to_resolver(c_file_resolver_data* data, char* path);
extern void tsc_free_resolver_data(c_file_resolver_data* data);
extern int esbuild_platform_default();
extern int esbuild_platform_browser();
extern int esbuild_platform_node();
extern int esbuild_platform_neutral();
extern c_int_array* esbuild_get_all_platform_values();
extern void esbuild_free_int_array(c_int_array* arr);

#ifdef __cplusplus
}
#endif
